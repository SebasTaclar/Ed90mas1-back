generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x", "debian-openssl-3.0.x", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int      @id @default(autoincrement())
  email          String   @unique
  password       String
  name           String
  role           String
  membershipPaid Boolean  @default(false) @map("membership_paid")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")
  team           Team?

  @@map("users")
}

model Category {
  id                   Int                  @id @default(autoincrement())
  name                 String               @unique
  description          String?
  createdAt            DateTime             @default(now()) @map("created_at")
  updatedAt            DateTime             @updatedAt @map("updated_at")
  tournamentCategories TournamentCategory[]

  @@map("categories")
}

model Tournament {
  id                   Int                  @id @default(autoincrement())
  name                 String
  description          String?
  startDate            DateTime             @map("start_date")
  endDate              DateTime             @map("end_date")
  maxTeams             Int                  @map("max_teams")
  isActive             Boolean              @default(true) @map("is_active")
  bannerPath           String?              @map("banner_path")
  createdAt            DateTime             @default(now()) @map("created_at")
  updatedAt            DateTime             @updatedAt @map("updated_at")
  teamTournaments      TeamTournament[]
  tournamentCategories TournamentCategory[]

  @@map("tournaments")
}

model Team {
  id              Int              @id @default(autoincrement())
  name            String
  userId          Int              @unique @map("user_id")
  isActive        Boolean          @default(true) @map("is_active")
  createdAt       DateTime         @default(now()) @map("created_at")
  updatedAt       DateTime         @updatedAt @map("updated_at")
  logoPath        String?          @map("logo_path")
  teamTournaments TeamTournament[]
  players         Player[]
  user            User             @relation(fields: [userId], references: [id])

  @@map("teams")
}

model Player {
  id                   Int      @id @default(autoincrement())
  firstName            String   @map("first_name")
  lastName             String   @map("last_name")
  email                String   @unique
  phone                String?
  identificationNumber String?  @map("identification_number")
  epsProvider          String?  @map("eps_provider")
  dateOfBirth          DateTime @map("date_of_birth")
  position             String?
  jerseyNumber         Int?     @map("jersey_number")
  isActive             Boolean  @default(true) @map("is_active")
  teamId               Int      @map("team_id")
  profilePhotoPath     String?  @map("profile_photo_path")
  createdAt            DateTime @default(now()) @map("created_at")
  updatedAt            DateTime @updatedAt @map("updated_at")
  team                 Team     @relation(fields: [teamId], references: [id])

  @@unique([teamId, jerseyNumber], name: "unique_jersey_per_team")
  @@map("players")
}

model TournamentCategory {
  id           Int        @id @default(autoincrement())
  tournamentId Int        @map("tournament_id")
  categoryId   Int        @map("category_id")
  category     Category   @relation(fields: [categoryId], references: [id])
  tournament   Tournament @relation(fields: [tournamentId], references: [id])

  @@unique([tournamentId, categoryId])
  @@map("tournament_categories")
}

model TeamTournament {
  id           Int        @id @default(autoincrement())
  teamId       Int        @map("team_id")
  tournamentId Int        @map("tournament_id")
  joinedAt     DateTime   @default(now()) @map("joined_at")
  team         Team       @relation(fields: [teamId], references: [id])
  tournament   Tournament @relation(fields: [tournamentId], references: [id])

  @@unique([teamId, tournamentId])
  @@map("team_tournaments")
}
