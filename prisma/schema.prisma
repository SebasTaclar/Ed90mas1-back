generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x", "debian-openssl-3.0.x", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int      @id @default(autoincrement())
  email          String   @unique
  password       String
  name           String
  role           String
  membershipPaid Boolean  @default(false) @map("membership_paid")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")
  team           Team?

  @@map("users")
}

model Category {
  id                   Int                  @id @default(autoincrement())
  name                 String               @unique
  description          String?
  createdAt            DateTime             @default(now()) @map("created_at")
  updatedAt            DateTime             @updatedAt @map("updated_at")
  tournamentCategories TournamentCategory[]

  @@map("categories")
}

model Tournament {
  id                      Int                      @id @default(autoincrement())
  name                    String
  description             String?
  startDate               DateTime                 @map("start_date")
  endDate                 DateTime                 @map("end_date")
  maxTeams                Int                      @map("max_teams")
  isActive                Boolean                  @default(true) @map("is_active")
  bannerPath              String?                  @map("banner_path")
  createdAt               DateTime                 @default(now()) @map("created_at")
  updatedAt               DateTime                 @updatedAt @map("updated_at")
  teamTournaments         TeamTournament[]
  tournamentCategories    TournamentCategory[]
  tournamentConfiguration TournamentConfiguration?
  tournamentGroups        TournamentGroup[]
  teamGroupAssignments    TeamGroupAssignment[]

  @@map("tournaments")
}

model Team {
  id                   Int                   @id @default(autoincrement())
  name                 String
  userId               Int                   @unique @map("user_id")
  isActive             Boolean               @default(true) @map("is_active")
  createdAt            DateTime              @default(now()) @map("created_at")
  updatedAt            DateTime              @updatedAt @map("updated_at")
  logoPath             String?               @map("logo_path")
  teamTournaments      TeamTournament[]
  players              Player[]
  user                 User                  @relation(fields: [userId], references: [id])
  teamGroupAssignments TeamGroupAssignment[]

  @@map("teams")
}

model Player {
  id                   Int      @id @default(autoincrement())
  firstName            String   @map("first_name")
  lastName             String   @map("last_name")
  email                String   @unique
  phone                String?
  identificationNumber String?  @map("identification_number")
  epsProvider          String?  @map("eps_provider")
  dateOfBirth          DateTime @map("date_of_birth")
  position             String?
  jerseyNumber         Int?     @map("jersey_number")
  isActive             Boolean  @default(true) @map("is_active")
  teamId               Int      @map("team_id")
  profilePhotoPath     String?  @map("profile_photo_path")
  createdAt            DateTime @default(now()) @map("created_at")
  updatedAt            DateTime @updatedAt @map("updated_at")
  team                 Team     @relation(fields: [teamId], references: [id])

  @@unique([teamId, jerseyNumber], name: "unique_jersey_per_team")
  @@map("players")
}

model TournamentCategory {
  id           Int        @id @default(autoincrement())
  tournamentId Int        @map("tournament_id")
  categoryId   Int        @map("category_id")
  category     Category   @relation(fields: [categoryId], references: [id])
  tournament   Tournament @relation(fields: [tournamentId], references: [id])

  @@unique([tournamentId, categoryId])
  @@map("tournament_categories")
}

model TeamTournament {
  id           Int        @id @default(autoincrement())
  teamId       Int        @map("team_id")
  tournamentId Int        @map("tournament_id")
  joinedAt     DateTime   @default(now()) @map("joined_at")
  team         Team       @relation(fields: [teamId], references: [id])
  tournament   Tournament @relation(fields: [tournamentId], references: [id])

  @@unique([teamId, tournamentId])
  @@map("team_tournaments")
}

model TournamentConfiguration {
  id             Int        @id @default(autoincrement())
  tournamentId   Int        @unique @map("tournament_id")
  numberOfGroups Int        @map("number_of_groups")
  teamsPerGroup  Int        @map("teams_per_group")
  isConfigured   Boolean    @default(false) @map("is_configured")
  createdAt      DateTime   @default(now()) @map("created_at")
  updatedAt      DateTime   @updatedAt @map("updated_at")
  tournament     Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)

  @@map("tournament_configurations")
}

model TournamentGroup {
  id                   Int                   @id @default(autoincrement())
  tournamentId         Int                   @map("tournament_id")
  groupName            String                @map("group_name")
  groupOrder           Int                   @map("group_order")
  createdAt            DateTime              @default(now()) @map("created_at")
  updatedAt            DateTime              @updatedAt @map("updated_at")
  tournament           Tournament            @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  teamGroupAssignments TeamGroupAssignment[]

  @@map("tournament_groups")
}

model TeamGroupAssignment {
  id           Int             @id @default(autoincrement())
  tournamentId Int             @map("tournament_id")
  teamId       Int             @map("team_id")
  groupId      Int             @map("group_id")
  assignedAt   DateTime        @default(now()) @map("assigned_at")
  tournament   Tournament      @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  team         Team            @relation(fields: [teamId], references: [id], onDelete: Cascade)
  group        TournamentGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([tournamentId, teamId])
  @@unique([teamId, groupId])
  @@map("team_group_assignments")
}
