generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x", "debian-openssl-3.0.x", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int      @id @default(autoincrement())
  email          String   @unique
  password       String
  name           String
  role           String
  membershipPaid Boolean  @default(false) @map("membership_paid")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")
  team           Team?

  @@map("users")
}

model Category {
  id                   Int                  @id @default(autoincrement())
  name                 String               @unique
  description          String?
  createdAt            DateTime             @default(now()) @map("created_at")
  updatedAt            DateTime             @updatedAt @map("updated_at")
  tournamentCategories TournamentCategory[]

  @@map("categories")
}

model Tournament {
  id                      Int                      @id @default(autoincrement())
  name                    String
  description             String?
  startDate               DateTime                 @map("start_date")
  endDate                 DateTime                 @map("end_date")
  maxTeams                Int                      @map("max_teams")
  isActive                Boolean                  @default(true) @map("is_active")
  bannerPath              String?                  @map("banner_path")
  createdAt               DateTime                 @default(now()) @map("created_at")
  updatedAt               DateTime                 @updatedAt @map("updated_at")
  teamTournaments         TeamTournament[]
  tournamentCategories    TournamentCategory[]
  tournamentConfiguration TournamentConfiguration?
  tournamentGroups        TournamentGroup[]
  teamGroupAssignments    TeamGroupAssignment[]
  matches                 Match[]

  @@map("tournaments")
}

model Team {
  id                   Int                   @id @default(autoincrement())
  name                 String
  userId               Int                   @unique @map("user_id")
  isActive             Boolean               @default(true) @map("is_active")
  createdAt            DateTime              @default(now()) @map("created_at")
  updatedAt            DateTime              @updatedAt @map("updated_at")
  logoPath             String?               @map("logo_path")
  teamTournaments      TeamTournament[]
  players              Player[]
  user                 User                  @relation(fields: [userId], references: [id])
  teamGroupAssignments TeamGroupAssignment[]
  homeMatches          Match[]               @relation("HomeMatches")
  awayMatches          Match[]               @relation("AwayMatches")
  matchEvents          MatchEvent[]
  matchStatistics      MatchStatistics[]

  @@map("teams")
}

model Player {
  id                   Int                 @id @default(autoincrement())
  firstName            String              @map("first_name")
  lastName             String              @map("last_name")
  email                String              @unique
  phone                String?
  identificationNumber String?             @map("identification_number")
  epsProvider          String?             @map("eps_provider")
  dateOfBirth          DateTime            @map("date_of_birth")
  position             String?
  jerseyNumber         Int?                @map("jersey_number")
  isActive             Boolean             @default(true) @map("is_active")
  teamId               Int                 @map("team_id")
  profilePhotoPath     String?             @map("profile_photo_path")
  createdAt            DateTime            @default(now()) @map("created_at")
  updatedAt            DateTime            @updatedAt @map("updated_at")
  team                 Team                @relation(fields: [teamId], references: [id])
  matchEvents          MatchEvent[]        @relation("PlayerEvents")
  assistEvents         MatchEvent[]        @relation("PlayerAssists")
  matchStatistics      MatchStatistics[]

  @@unique([teamId, jerseyNumber], name: "unique_jersey_per_team")
  @@map("players")
}

model TournamentCategory {
  id           Int        @id @default(autoincrement())
  tournamentId Int        @map("tournament_id")
  categoryId   Int        @map("category_id")
  category     Category   @relation(fields: [categoryId], references: [id])
  tournament   Tournament @relation(fields: [tournamentId], references: [id])

  @@unique([tournamentId, categoryId])
  @@map("tournament_categories")
}

model TeamTournament {
  id           Int        @id @default(autoincrement())
  teamId       Int        @map("team_id")
  tournamentId Int        @map("tournament_id")
  joinedAt     DateTime   @default(now()) @map("joined_at")
  team         Team       @relation(fields: [teamId], references: [id])
  tournament   Tournament @relation(fields: [tournamentId], references: [id])

  @@unique([teamId, tournamentId])
  @@map("team_tournaments")
}

model TournamentConfiguration {
  id             Int        @id @default(autoincrement())
  tournamentId   Int        @unique @map("tournament_id")
  numberOfGroups Int        @map("number_of_groups")
  teamsPerGroup  Int        @map("teams_per_group")
  isConfigured   Boolean    @default(false) @map("is_configured")
  createdAt      DateTime   @default(now()) @map("created_at")
  updatedAt      DateTime   @updatedAt @map("updated_at")
  tournament     Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)

  @@map("tournament_configurations")
}

model TournamentGroup {
  id                   Int                   @id @default(autoincrement())
  tournamentId         Int                   @map("tournament_id")
  groupName            String                @map("group_name")
  groupOrder           Int                   @map("group_order")
  createdAt            DateTime              @default(now()) @map("created_at")
  updatedAt            DateTime              @updatedAt @map("updated_at")
  tournament           Tournament            @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  teamGroupAssignments TeamGroupAssignment[]
  matches              Match[]

  @@map("tournament_groups")
}

model TeamGroupAssignment {
  id           Int             @id @default(autoincrement())
  tournamentId Int             @map("tournament_id")
  teamId       Int             @map("team_id")
  groupId      Int             @map("group_id")
  assignedAt   DateTime        @default(now()) @map("assigned_at")
  tournament   Tournament      @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  team         Team            @relation(fields: [teamId], references: [id], onDelete: Cascade)
  group        TournamentGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([tournamentId, teamId])
  @@unique([teamId, groupId])
  @@map("team_group_assignments")
}

model Match {
  id              Int                 @id @default(autoincrement())
  tournamentId    Int                 @map("tournament_id")
  groupId         Int?                @map("group_id")
  homeTeamId      Int                 @map("home_team_id")
  awayTeamId      Int                 @map("away_team_id")
  matchDate       DateTime            @map("match_date")
  location        String?
  status          String              @default("scheduled") // scheduled, in_progress, finished, cancelled
  homeScore       Int?                @map("home_score")
  awayScore       Int?                @map("away_score")
  round           String?             // "group_stage", "round_of_16", etc.
  matchNumber     Int                 @map("match_number")
  startTime       DateTime?           @map("start_time")
  endTime         DateTime?           @map("end_time")
  createdAt       DateTime            @default(now()) @map("created_at")
  updatedAt       DateTime            @updatedAt @map("updated_at")
  
  tournament      Tournament          @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  group           TournamentGroup?    @relation(fields: [groupId], references: [id], onDelete: SetNull)
  homeTeam        Team                @relation(fields: [homeTeamId], references: [id], name: "HomeMatches")
  awayTeam        Team                @relation(fields: [awayTeamId], references: [id], name: "AwayMatches")
  matchEvents     MatchEvent[]
  matchStatistics MatchStatistics[]

  @@unique([tournamentId, matchNumber])
  @@map("matches")
}

model MatchEvent {
  id             Int      @id @default(autoincrement())
  matchId        Int      @map("match_id")
  playerId       Int      @map("player_id")
  teamId         Int      @map("team_id")
  eventType      String   @map("event_type") // goal, yellow_card, red_card, substitution, assist
  minute         Int      // Minuto del evento
  extraTime      Int?     @map("extra_time") // Tiempo adicional (ej: 90+3)
  description    String?  // Descripci√≥n adicional del evento
  assistPlayerId Int?     @map("assist_player_id") // Para goles con asistencia
  createdAt      DateTime @default(now()) @map("created_at")
  
  match        Match   @relation(fields: [matchId], references: [id], onDelete: Cascade)
  player       Player  @relation(fields: [playerId], references: [id], name: "PlayerEvents")
  team         Team    @relation(fields: [teamId], references: [id])
  assistPlayer Player? @relation(fields: [assistPlayerId], references: [id], name: "PlayerAssists")

  @@map("match_events")
}

model MatchStatistics {
  id              Int      @id @default(autoincrement())
  matchId         Int      @map("match_id")
  playerId        Int      @map("player_id")
  teamId          Int      @map("team_id")
  minutesPlayed   Int      @default(0) @map("minutes_played")
  goals           Int      @default(0)
  assists         Int      @default(0)
  yellowCards     Int      @default(0) @map("yellow_cards")
  redCards        Int      @default(0) @map("red_cards")
  shotsOnTarget   Int      @default(0) @map("shots_on_target")
  shotsOffTarget  Int      @default(0) @map("shots_off_target")
  foulsCommitted  Int      @default(0) @map("fouls_committed")
  foulsReceived   Int      @default(0) @map("fouls_received")
  corners         Int      @default(0)
  offsides        Int      @default(0)
  saves           Int      @default(0) // Para porteros
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  
  match  Match  @relation(fields: [matchId], references: [id], onDelete: Cascade)
  player Player @relation(fields: [playerId], references: [id])
  team   Team   @relation(fields: [teamId], references: [id])

  @@unique([matchId, playerId])
  @@map("match_statistics")
}
