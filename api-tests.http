# Test Azure Functions API Endpoints
# All responses follow the standard format:
# {
#   "success": boolean,
#   "message": string,
#   "data": any,
#   "errors": string[] (optional),
#   "timestamp": string,
#   "statusCode": number
# }
# 
# ⚠️ IMPORTANTE: Los endpoints de USER CREATION ahora requieren autenticación JWT
# Para pruebas con autenticación, usar el archivo: api-tests-with-auth.http

### Login with Admin User - Success Response
POST http://localhost:7071/api/funcLogin
Content-Type: application/json

{
  "email": "admin@example.com",
  "password": "admin123"
}

### Login with Regular User - Success Response
POST http://localhost:7071/api/funcLogin
Content-Type: application/json

{
  "email": "user@example.com",
  "password": "user123"
}

### Login with Manager User - Success Response
POST http://localhost:7071/api/funcLogin
Content-Type: application/json

{
  "email": "manager@example.com",
  "password": "manager123"
}

### Login with Invalid Credentials - Error Response
POST http://localhost:7071/api/funcLogin
Content-Type: application/json

{
  "email": "invalid@example.com",
  "password": "invalid"
}

### Login with Missing Password - Validation Error Response
POST http://localhost:7071/api/funcLogin
Content-Type: application/json

{
  "email": "admin@example.com"
}

### Login with Empty Body - Validation Error Response
POST http://localhost:7071/api/funcLogin
Content-Type: application/json

{}

###
# USER CREATION ENDPOINTS
###

### Create Admin User - Success Response
POST http://localhost:7071/api/funcCreateUser
Content-Type: application/json

{
  "email": "admin@example.com",
  "password": "admin123",
  "name": "Administrator",
  "role": "admin",
  "membershipPaid": true
}

### Create Regular User - Success Response
POST http://localhost:7071/api/funcCreateUser
Content-Type: application/json

{
  "email": "user@example.com",
  "password": "user123",
  "name": "Regular User",
  "role": "user",
  "membershipPaid": false
}

### Create Manager User - Success Response
POST http://localhost:7071/api/funcCreateUser
Content-Type: application/json

{
  "email": "manager@example.com",
  "password": "manager123",
  "name": "Manager User",
  "role": "manager",
  "membershipPaid": true
}

### Create User with Duplicate Email - Error Response
POST http://localhost:7071/api/funcCreateUser
Content-Type: application/json

{
  "email": "admin@example.com",
  "password": "admin456",
  "name": "Another Admin",
  "role": "admin"
}

### Create User with Missing Fields - Validation Error Response
POST http://localhost:7071/api/funcCreateUser
Content-Type: application/json

{
  "email": "incomplete@example.com",
  "password": "test123"
}

### Create User with Empty Body - Validation Error Response
POST http://localhost:7071/api/funcCreateUser
Content-Type: application/json

{}

###
# TOURNAMENT CONFIGURATION ENDPOINTS
# 
# ✨ NUEVA FUNCIONALIDAD: 
# Los endpoints de GET /api/tournaments ahora incluyen automáticamente:
# - configuration: Configuración del torneo (grupos, equipos por grupo)
# - groups: Lista de grupos del torneo (A, B, C, etc.)
# - teamAssignments: Asignaciones de equipos a grupos
# 
# Si un torneo no está configurado, estos campos aparecerán como null o vacíos.
###

### Get All Tournaments (now includes configuration) - Enhanced Response
GET http://localhost:7071/api/tournaments
# Response will now include configuration data for each tournament

### Configure Tournament - Success Response
POST http://localhost:7071/api/tournaments/1/configuration
Content-Type: application/json

{
  "numberOfGroups": 4,
  "teamsPerGroup": 4,
  "teamAssignments": [
    { "teamId": 1, "groupName": "A" },
    { "teamId": 2, "groupName": "A" },
    { "teamId": 3, "groupName": "B" },
    { "teamId": 4, "groupName": "B" }
  ]
}

### Configure Tournament with Auto Assignment - Success Response
POST http://localhost:7071/api/tournaments/2/configuration
Content-Type: application/json

{
  "numberOfGroups": 2,
  "teamsPerGroup": 6
}

### Get Tournament Configuration - Success Response
GET http://localhost:7071/api/tournaments/1/configuration

### Get Non-existent Tournament Configuration - Not Found Response
GET http://localhost:7071/api/tournaments/999/configuration

### Update Tournament Configuration - Success Response
PUT http://localhost:7071/api/tournaments/1/configuration
Content-Type: application/json

{
  "numberOfGroups": 6,
  "teamsPerGroup": 3,
  "isConfigured": true
}

### Configure Tournament with Invalid Data - Validation Error Response
POST http://localhost:7071/api/tournaments/3/configuration
Content-Type: application/json

{
  "numberOfGroups": 0,
  "teamsPerGroup": -1
}

### Configure Tournament with Too Many Groups - Validation Error Response
POST http://localhost:7071/api/tournaments/4/configuration
Content-Type: application/json

{
  "numberOfGroups": 30,
  "teamsPerGroup": 4
}
